# Serving from symlinks: WordPress directories on NFS (aka have your cake),
# but with all PHP code symlinked from /wp (aka eat it too).
#
# This is an *optional* set of tasks that only run when either `-t
# symlink` or `-t unsymlink` is specified. Note that these tags are
# *not* auto-propagated by caller; therefore, each task must
# explicitly specify under which circumstances (= set of tags) it is
# to run.
#
# Being (or not being) a symlinked site also has consequences w.r.t.
# templated configuration files; see configure.yml for details.

# Required by _symlinks_muplugins_yaml in symlink-vars.yml:
- include_vars: category-vars.yml
  tags: always

- include_vars: symlink-vars.yml
  tags: always

- name: "Set wp_is_symlinked"
  tags: always
  set_fact:
    wp_is_symlinked: '{{ "symlink" in ansible_run_tags }}'

# WP_CONTENT_DIR can be set in wp-config.php prior to symlinking
# without ill effects:
- name: "Reconfigure wp-config.php before symlinking"
  tags: symlink
  include_tasks:
    file: configure.yml
    apply:
      tags: ["symlink"]

- name: "Symlink"
  tags: symlink
  check_mode: no   # Does The Right Thing under ansible-playbook --check
  shell:
    cmd: |
      {{ lookup("template", "symlinks-lib.sh") }}
      {{ lookup("template", "maintenance-lib.sh") }}

      set -e -x
      cd {{ wp_dir }}

      {% if not ansible_check_mode %}
      enter_maintenance_mode
      trap leave_maintenance_mode EXIT HUP INT QUIT
      {% endif %}

      if make_symlinks_to_wp {{ symlinks_all_paths | join(" ") }}; then :; else
          case "$?" in
              1) echo "SYMLINKS_CHANGED" ;;
              *) exit $?                 ;;
          esac
      fi

      if ensure_file_contains index.php <<INDEX_PHP
      {{ lookup('template', 'wordpress-index.php') }}
      INDEX_PHP
      then
          :
      else
          case "$?" in
              1) echo INDEX_PHP_CHANGED ;;
              *) exit $?                ;;
          esac
      fi
  register: _symlink_script
  changed_when: >
    "SYMLINKS_CHANGED" in _symlink_script.stdout or
    "INDEX_PHP_CHANGED" in _symlink_script.stdout

- name: "Unsymlink (copy from /wp)"
  tags: unsymlink
  when: wp_can.configure or ansible_check_mode
  check_mode: no
  shell:
    cmd: |
      {{ lookup("template", "symlinks-lib.sh") }}
      {{ lookup("template", "maintenance-lib.sh") }}

      set -e -x
      cd {{ wp_dir }}

      if ensure_file_contains index.php <<INDEX_PHP
      {{ lookup('template', 'wordpress-index.php') }}
      INDEX_PHP
      then
          :
      else
          case "$?" in
              1) echo INDEX_PHP_CHANGED ;;
              *) exit $?                ;;
          esac
      fi

      {% if not ansible_check_mode %}
      enter_maintenance_mode
      trap leave_maintenance_mode EXIT HUP INT QUIT
      {% endif %}

      if [ "" = "$(find . -name uploads -prune -false -o -type l)" ]; then
        echo NO_SYMLINKS
        exit 0
      fi

      {% if ansible_check_mode %}
      exit 0
      {% endif %}

      for subdir in wp-content/themes wp-content/plugins \
                    wp-content/mu-plugins; do
        if ! [ -L "$subdir" ]; then
          find "$subdir" -type l -delete
        fi
      done
      find . wp-content -maxdepth 1 -type l -delete

      (cd /wp; tar clf - .) | tar xpvf -
  register: _unsymlink_script
  changed_when: >
    "INDEX_PHP_CHANGED" in _unsymlink_script.stdout or
    "NO_SYMLINKS" not in _unsymlink_script.stdout

- name: "Verify that there are no stale files on symlinked site"
  tags: symlink
  check_mode: no
  shell:
    cmd: |
      # Trim all files at top level (except for a whitelist), and
      # the auto-update muplugin

      set -e -x
      cd "{{ wp_dir }}"

      files_trimmed=
      for path in * \
          wp-content/mu-plugins/EPFL_enable_updates_automatic.php
      do
          case "$path" in
              .ht*) continue ;;
              *.ini) continue ;;
              wp-config.php|index.php) continue ;;
              {{ symlinks_all_paths | join('|') }}) continue ;;
          esac
          if [ ! -e "$path" ]; then continue; fi
          if [ -d "$path" ]; then continue; fi

          if [ -z "$files_trimmed" ]; then
              echo FILES_TRIMMED
              files_trimmed=1
          fi
          echo >&2 "$path needs trimming"
      done
  register: _symlink_cleanup_script
  changed_when: '"FILES_TRIMMED" in _symlink_cleanup_script.stdout'

- name: "Reconfigure wp-config.php after unsymlinking"
  tags: unsymlink
  include_tasks:
    file: configure.yml
    apply:
      tags: ["unsymlink"]

